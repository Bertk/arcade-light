trigger:
  batch: true
  branches:
    include:
    - main

pr:
  branches:
    include:
    - main
    - templates

variables:
- template: eng/common-variables.yml
- name: DOTNET_CLI_TELEMETRY_OPTOUT
  value: 1

stages:
- stage: build
  displayName: Build
  jobs:
  - template: /eng/azuredevops/pipelines/jobs/jobs.yml
    parameters:
      artifacts:
        publish:
          artifacts: true
          logs: true
          packages: true
      workspace:
        clean: all
      jobs:
      - job: Windows_NT
        timeoutInMinutes: 90
        pool:
          vmImage: windows-latest
        strategy:
          matrix:
            Build_Release:
              _BuildConfig: Release
            ${{ if eq(variables._RunAsPublic, True) }}:
              Build_Debug:
                _BuildConfig: Debug
        preSteps:
        - checkout: self
          fetchDepth: 0
          clean: true
        steps:
        - task: NuGetAuthenticate@1
        - script: eng\commonlight\cibuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            $(_InternalBuildArgs)
            /p:Test=false
          displayName: Windows Build / Publish
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      - ${{ if eq(variables._RunAsPublic, True) }}:
        - job: Linux
          timeoutInMinutes: 90
          pool:
            vmImage: ubuntu-latest
          strategy:
            matrix:
              Build_Debug:
                _BuildConfig: Debug
              Build_Release:
                _BuildConfig: Release
          preSteps:
          - checkout: self
            fetchDepth: 0
            clean: true
          steps:
          - task: NuGetAuthenticate@1
          - script: eng/commonlight/cibuild.sh
              --configuration $(_BuildConfig)
              --prepareMachine
              /p:Test=false
            displayName: Unix Build / Publish
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)

- stage: Test
  dependsOn: build
  jobs:
  - template: /eng/azuredevops/pipelines/jobs/jobs.yml
    parameters:
      artifacts:
        publish:
          logs:
            name: Logs_Test_$(Agent.OS)_$(_BuildConfig)
        download: true
      workspace:
        clean: all
      jobs:
      - job: Windows_NT
        timeoutInMinutes: 90
        pool:
          vmimage: windows-latest
        strategy:
          maxParallel: 1
          matrix:
            Build_Release:
              _BuildConfig: Release
            Build_Debug:
              _BuildConfig: Debug
        preSteps:
        - checkout: self
          fetchDepth: 0
          clean: true
        steps:
        - task: NuGetAuthenticate@1
        - task: DotNetCoreCLI@2
          inputs:
            command: 'publish'
            arguments: '-f net6.0'
            publishWebProjects: false
            projects: 'src/**/*.Tests.csproj'
            zipAfterPublish: false
            modifyOutputPath: false
        - task: DotNetCoreCLI@2
          inputs:
            command: 'publish'
            arguments: '-f net7.0'
            publishWebProjects: false
            projects: 'src/**/*.Tests.csproj'
            zipAfterPublish: false
            modifyOutputPath: false

        - powershell: eng\commonlight\build.ps1
            -configuration $(_BuildConfig)
            -prepareMachine
            -ci
            -restore
            -test
            -projects $(Build.SourcesDirectory)\**\*Tests.csproj
            /bl:$(Build.SourcesDirectory)\artifacts\log\$(_BuildConfig)\test-windows.binlog
            /p:RestoreUsingNuGetTargets=false
          displayName: Run Tests
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        - task: PublishTestResults@2
          condition: succeededOrFailed()
          inputs:
            testRunner: VSTest
            testResultsFiles: '**/*.trx'

        - template: ../steps/CoverageResults.yml
          parameters:
            reports: $(Build.SourcesDirectory)/**/coverage.cobertura.xml
            condition: and(succeeded(), eq(variables['_BuildConfig'], 'Debug'))
            assemblyfilters: '-xunit*;-DotNet.ArcadeLight.Test.Common;-DotNet.Internal.DependencyInjection.Testing'
            breakBuild: true

      - job: Linux
        timeoutInMinutes: 90
        pool:
          vmimage: ubuntu-latest
        strategy:
          matrix:
            Build_Debug:
              _BuildConfig: Debug
            Build_Release:
              _BuildConfig: Release
        preSteps:
        - checkout: self
          fetchDepth: 0
          clean: true
        steps:
        - task: NuGetAuthenticate@1
        - script: eng/commonlight/build.sh
            --configuration $(_BuildConfig)
            --prepareMachine
            --ci
            --restore
            --test
            --projects $(Build.SourcesDirectory)/**/*Tests.proj
            /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/test-linux.binlog
            /p:RestoreUsingNuGetTargets=false
          displayName: Run Tests
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        - task: PublishTestResults@2
          condition: succeededOrFailed()
          inputs:
            testRunner: VSTest
            testResultsFiles: '**/*.trx'

- stage: Push
  dependsOn: test
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: Validate
    timeoutInMinutes: 90
    pool:
      vmimage: windows-latest
    variables:
    - name: _BuildConfig
      value: Debug
    steps:
    - task: UseDotNet@2
      displayName: 'Use dotnet SDK (global)'
      inputs:
        packageType: 'sdk'
        useGlobalJson: true

    - task: NuGetAuthenticate@1

    - script: eng\commonlight\cibuild.cmd
        -configuration $(_BuildConfig)
        -prepareMachine
        --restore
        $(_InternalBuildArgs)
        /p:Test=false
      displayName: Windows Build / Publish
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)

    - template: eng/azuredevops/pipelines/steps/CheckNugetStatus.yml
      parameters:
        sourcePath: '$(Build.SourcesDirectory)/src'
        nugetConfig: '$(Build.SourcesDirectory)/nuget.config'
        breakBuild: true

    - template: eng/azuredevops/pipelines/steps/GenerateSBOM.yml
      parameters:
        projects: '$(Build.SourcesDirectory)\$(_SolutionFile)'
        outputPath: '$(Build.SourcesDirectory)\artifacts'
        publishSBOM: true


  - job: Windows_NT
    timeoutInMinutes: 90
    dependsOn: Validate
    pool:
      vmimage: windows-latest
    variables:
    - name: _BuildConfig
      value: Debug
    steps:
    - pwsh: |
        # Set Variables:
        $artifactName = "Artifacts_$(Agent.Os)_${{variables._BuildConfig}}"
        Write-Host "##vso[task.setvariable variable=artifactName]$artifactName"
      displayName: "Set $artifactName variable"

    - task: UseDotNet@2
      displayName: 'Use dotnet SDK (global)'
      inputs:
        packageType: 'sdk'
        useGlobalJson: true

    - task: NuGetAuthenticate@1

    - task: DownloadBuildArtifacts@1
      displayName: 'download $(artifactName)'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(artifactName)'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: CmdLine@2
      displayName: 'dotnet push to feed public'
      inputs:
        script: 'dotnet.exe nuget push --source "public" --api-key az --skip-duplicate $(System.ArtifactsDirectory)\**\*.nupkg'
      condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'))
