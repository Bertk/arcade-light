<Project>
  <ItemGroup>
    <PackageReference Include="xunit.runner.console" PrivateAssets="all" Publish="true"/>
    <PackageReference Include="coverlet.collector" PrivateAssets="all" Publish="true"/>
  </ItemGroup>

  <Target Name="RunTests"
          Outputs="%(TestToRun.ResultsStdOutPath)"
          Condition="'@(TestToRun)' != ''">

    <PropertyGroup>
      <_TestEnvironment>%(TestToRun.EnvironmentDisplay)</_TestEnvironment>
      <_TestAssembly>%(TestToRun.Identity)</_TestAssembly>
      <_TestRuntime>%(TestToRun.TestRuntime)</_TestRuntime>
      <_TestTimeout>%(TestToRun.TestTimeout)</_TestTimeout>
      <_TestRunnerAdditionalArguments>%(TestToRun.TestRunnerAdditionalArguments)</_TestRunnerAdditionalArguments>

      <_TestRunnerTargetFramework>net6.0</_TestRunnerTargetFramework>
      <_TestRunnerTargetFramework Condition="'$(TargetFrameworkForNETSDK)' != ''">$(TargetFrameworkForNETSDK)</_TestRunnerTargetFramework>
      <_TestRunnerTargetFramework Condition="%(TestToRun.TargetFramework) == 'netcoreapp1.1' or %(TestToRun.TargetFramework) == 'netcoreapp1.0'">netcoreapp1.0</_TestRunnerTargetFramework>
      <_TestPublishDir>%(TestToRun.TestPublishDir)</_TestPublishDir>
    </PropertyGroup>

    <PropertyGroup Condition="'$(_TestRuntime)' == 'Core'">
      <_TargetFileNameNoExt>$([System.IO.Path]::GetFileNameWithoutExtension('$(_TestAssembly)'))</_TargetFileNameNoExt>
      <_TargetDir>$([System.IO.Path]::GetDirectoryName('$(_TestAssembly)'))\</_TargetDir>
      <!-- coverlet collector will create coverage data after publish of test project was done -->
      <!-- source: https://github.com/microsoft/vstest-docs/blob/main/docs/dotnetcoretests.md
        "To mitigate the issue and as a general recommendation for running dot net core tests with vstest task please ask the customer to publish the test project and point
        to the publish location for running tests. Publish ensures all needed dependencies are present for the tests to be executed alongside the test dll in case of
        dot net core tests."
        
      -->


      <_CoreRuntimeConfigPath>$(_TargetDir)$(_TargetFileNameNoExt).runtimeconfig.json</_CoreRuntimeConfigPath>
      <_CoreDepsPath>$(_TargetDir)$(_TargetFileNameNoExt).deps.json</_CoreDepsPath>

      <_TestRunner Condition="'%(TestToRun.Architecture)'=='x86' And Exists('$(DotNetRoot)x86\dotnet.exe')">$(DotNetRoot)x86\dotnet.exe</_TestRunner>
      <_TestRunner Condition="'$(_TestRunner)'==''">$(DotNetTool)</_TestRunner>

      <_TestResultDirectory>$([System.IO.Path]::GetDirectoryName('%(TestToRun.ResultsTrxPath)'))</_TestResultDirectory>
      <_TestResultTrxFileName>$([System.IO.Path]::GetFileName('%(TestToRun.ResultsTrxPath)'))</_TestResultTrxFileName>
      <_TestRunnerArgs>vstest "$(_TestAssembly)" /collect:"XPlat Code Coverage" --ResultsDirectory:"$(_TestResultDirectory)" --logger:"trx;LogFileName=$(_TestResultTrxFileName)" --Diag:"%(TestToRun.ResultDiagLogfilePath);tracelevel=verbose" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.ExcludeByFile="**/*.Version.cs"</_TestRunnerArgs>
    </PropertyGroup>

    <Message Text="Use _TestAssembly  '$(_TestAssembly)'" Condition="Exists($(_TestAssembly))" Importance="high" />

    <PropertyGroup Condition="'$(_TestRuntime)' != 'Core'">
      <_XUnitConsoleExe>xunit.console.exe</_XUnitConsoleExe>
      <_XUnitConsoleExe Condition="'%(TestToRun.Architecture)' == 'x86'">xunit.console.x86.exe</_XUnitConsoleExe>
      <_XUnitConsoleExePath>$(NuGetPackageRoot)xunit.runner.console\$(XUnitVersion)\tools\$(_TestRunnerTargetFramework)\$(_XUnitConsoleExe)</_XUnitConsoleExePath>

      <_TestRunnerArgs>"$(_TestAssembly)" -noshadow -xml "%(TestToRun.ResultsXmlPath)" -html "%(TestToRun.ResultsHtmlPath)" $(_TestRunnerAdditionalArguments)</_TestRunnerArgs>
    </PropertyGroup>


    <PropertyGroup>
      <_TestRunnerCommand>"$(_TestRunner)" $(_TestRunnerArgs)</_TestRunnerCommand>

      <!--
        Redirect std output of the runner.
        Note that xUnit outputs failure info to both STDOUT (stack trace, message) and STDERR (failed test name)
      -->
      <_TestRunnerCommand Condition="'$(TestCaptureOutput)' != 'false'">$(_TestRunnerCommand) > "%(TestToRun.ResultsStdOutPath)" 2>&amp;1</_TestRunnerCommand>
    </PropertyGroup>

    <ItemGroup>
      <_OutputFiles Include="%(TestToRun.ResultsTrxPath)" />
      <_OutputFiles Include="%(TestToRun.ResultDiagLogfilePath)" />
    </ItemGroup>

    <MakeDir Directories="@(_OutputFiles->'%(RootDir)%(Directory)')"/>
    <Delete Files="@(_OutputFiles)" />

    <Message Text="Running tests: $(_TestAssembly) [$(_TestEnvironment)]" Importance="high"/>
    <Exec Command='$(_TestRunnerCommand)'
          LogStandardErrorAsError="false"
          WorkingDirectory="$(_TargetDir)"
          IgnoreExitCode="true"
          Timeout="$(_TestTimeout)"
          ContinueOnError="WarnAndContinue">
      <Output TaskParameter="ExitCode" PropertyName="_TestErrorCode" />
    </Exec>

    <!--
      Add command line to the log.
    -->
    <WriteLinesToFile File="%(TestToRun.ResultsStdOutPath)"
                      Overwrite="false"
                      Lines=";=== COMMAND LINE ===;$(_TestRunnerCommand)"
                      Condition="'$(TestCaptureOutput)' != 'false'" />

    <!--
      Report test status.
    -->
    <Message Text="Tests succeeded: $(_TestAssembly) [$(_TestEnvironment)]" Condition="'$(_TestErrorCode)' == '0'" Importance="high" />

    <PropertyGroup>
      <_ResultsFileToDisplay>%(TestToRun.ResultsHtmlPath)</_ResultsFileToDisplay>
      <_ResultsFileToDisplay Condition="!Exists('$(_ResultsFileToDisplay)')">%(TestToRun.ResultsStdOutPath)</_ResultsFileToDisplay>
    </PropertyGroup>

    <!--
      Ideally we would set ContinueOnError="ErrorAndContinue" so that when a test fails in multi-targeted test project
      we'll still run tests for all target frameworks. ErrorAndContinue doesn't work well on Linux though: https://github.com/Microsoft/msbuild/issues/3961.
    -->
    <Error Text="Tests failed: $(_ResultsFileToDisplay) [$(_TestEnvironment)]" Condition="'$(_TestErrorCode)' != '0' and '$(_ErrorOnTestFailure)' != 'false'" File="XUnit" />

    <ItemGroup>
      <FileWrites Include="@(_OutputFiles)"/>
    </ItemGroup>
  </Target>
</Project>
